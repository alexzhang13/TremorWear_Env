    np.random.seed(7)
    random.seed(7)

    processor = preprocess.SignalProcessor(500)
    env = TremorSim(10000)
    ground, data = env.generate_sim()
    input_size = 64
    output_size = 16
    x = np.arange(0, 1000-input_size)
    y = np.arange(input_size, 1000)

    xs = [data[i].getGyroReading() for i in x]
    ys = [ground[i].getTremor() for i in y]

    filt_x, _ = processor.Bandpass_Filter(xs, 3, 13, 5)

    dataset = np.reshape(filt_x, [-1, 1])
    gdataset = np.reshape(ys, [-1, 1])

    scaler = MinMaxScaler(feature_range=(-1, 1))
    dataset = scaler.fit_transform(dataset)
    gdataset = scaler.transform(gdataset)

    # split into train and test sets
    train_size = int(len(dataset) * 0.67)
    test_size = len(dataset) - train_size
    train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]
    gtrain, gtest = gdataset[0:train_size,:], dataset[train_size:len(dataset),:]

    # reshape into X=t and Y=t+1
    trainX, trainY = create_dataset(train, gtrain, input_size, output_size)
    testX, testY = create_dataset(test, gtest, input_size, output_size)

    # reshape input to be [samples, time steps, features]
    trainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1], 1))
    testX = np.reshape(testX, (testX.shape[0], testX.shape[1], 1))

        # make predictions
    trainPredict = model.predict(trainX)
    testPredict = model.predict(testX)

    # invert predictions
    trainPredict = scaler.inverse_transform(trainPredict)
    trainY = scaler.inverse_transform(trainY)
    testPredict = scaler.inverse_transform(testPredict)
    testY = scaler.inverse_transform(testY)


    # calculate root mean squared error
    trainScore = math.sqrt(mean_squared_error(trainY[:,0], trainPredict[:,0]))
    print('Train Score: %.2f RMSE' % (trainScore))
    testScore = math.sqrt(mean_squared_error(testY[:,0], testPredict[:,0]))
    print('Test Score: %.2f RMSE' % (testScore))

    # shift train predictions for plotting
    trainPredictPlot = np.empty_like(dataset)
    trainPredictPlot[:, :] = np.nan
    trainPredictPlot[input_size:len(trainPredict)+input_size, :] = trainPredict

    # shift test predictions for plotting
    testPredictPlot = np.empty_like(dataset)
    testPredictPlot[:, :] = np.nan
    testPredictPlot[len(trainPredict)+(input_size*2)+1:len(dataset)-1, :] = testPredict

    # plot baseline and predictions
    plt.plot(scaler.inverse_transform(gdataset))
    plt.plot(trainPredictPlot)
    plt.plot(testPredictPlot)
    plt.show()